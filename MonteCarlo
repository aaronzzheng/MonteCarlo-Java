import components.random.Random;
import components.random.Random1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Monte Carlo Estimate: compute percentage of pseudo-random points in [0.0,2.0)
 * interval that fall in a circle with radius 1.
 */
public final class MonteCarlo2 {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private MonteCarlo2() {
    }

    /**
     * Checks whether the given point (xCoord, yCoord) is inside the circle of
     * radius 1.0 centered at the point (1.0, 1.0).
     *
     * @param xCoord
     *            the x coordinate of the point
     * @param yCoord
     *            the y coordinate of the point
     * @return true if the point is inside the circle, false otherwise
     */
    private static boolean pointIsInCircle(double xCoord, double yCoord) {

        // Calculate the distance from the point to the center of the circle
        double value = ((xCoord - 1) * (xCoord - 1))
                + ((yCoord - 1) * (yCoord - 1));

        // Check if the distance is less than 1 (inside the circle)
        return value < 1;
    }

    /**
     * Generates n pseudo-random points in the [0.0,2.0) x [0.0,2.0) square and
     * returns the number that fall in the circle of radius 1.0 centered at the
     * point (1.0, 1.0).
     *
     * @param n
     *            the number of points to generate
     * @return the number of points that fall in the circle
     */
    private static int numberOfPointsInCircle(int n) {

        int count = 0;
        double ptsInInterval = 0;

        Random rnd = new Random1L();

        while (ptsInInterval < n) {

            // Generate random coordinates within the square [0.0, 2.0) x [0.0, 2.0)
            double xCoord = (rnd.nextDouble()) * 2;
            double yCoord = (rnd.nextDouble()) * 2;

            // Check if the point is inside the circle
            if (pointIsInCircle(xCoord, yCoord)) {
                count++;
            }
            ptsInInterval++;
        }
        return count;
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        /*
         * Open input and output streams
         */
        SimpleReader input = new SimpleReader1L();
        SimpleWriter output = new SimpleWriter1L();

        final double four = 4.0;

        //Ask user for number of points to generate
        output.print("Number of points: ");
        int n = input.nextInteger();

        // Calculate the number of points inside the circle
        int count = numberOfPointsInCircle(n);

        //Calculate and output the estimated area of the circle
        double estimate = four * count / n;
        output.println("Area of Circle: " + estimate);

        input.close();
        output.close();
    }

}
